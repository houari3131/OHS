
// Check if the current URL does not include "generate captcha"
if (window.location.href.includes("/GenerateCaptcha")) {

} else {
    // Function to dynamically load a script
    function loadScript(url, callback) {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onload = callback;
        document.head.appendChild(script);
    }

    // Function to dynamically load a stylesheet
    function loadStylesheet(url) {
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = url;
        document.head.appendChild(link);
    }

    // Load flatpickr CSS
    loadStylesheet('https://cdn.jsdelivr.net/npm/flatpickr@4.6.9/dist/flatpickr.min.css');

    // Load flatpickr script
    loadScript('https://cdn.jsdelivr.net/npm/flatpickr@4.6.9/dist/flatpickr.min.js', function() {
        // Load flatpickr French locale script
        loadScript('https://cdn.jsdelivr.net/npm/flatpickr@4.6.9/dist/l10n/fr.js', initializeScript);
    });

    function initializeScript() {
        const defaultSettings = [
           'Auto Refresh',
            'Random Refresh',
            'Successive Refresh',
            'Auto Submit Response Selfie Code',
            'Auto Login',
            'Captcha Login Auto Solve',
            'Captcha Visa Type Auto Solve',
            'Auto Submit Visa Type',
            'Auto Select Date',
            'Auto Submit Date Selection',
            'Auto Upload Photo',
            'Auto Calendar ByPass Captcha',
            'Auto Send Otp',
            'Auto Selfi',
            'Auto skip',
            'Random Mobile Number',
            'Random Passport Issue Place',
            'Random Passport Issue And Expiry Date'
        ];

        // Set default settings to true if they are not already set
        defaultSettings.forEach(setting => {
            if (localStorage.getItem(setting) === null) {
                localStorage.setItem(setting, 'true');
            }
        });

        // Ensure Random Refresh and Successive Refresh are mutually exclusive
        function setMutuallyExclusive(ref1, ref2) {
            const ref1Value = localStorage.getItem(ref1) === 'true';
            localStorage.setItem(ref1, ref1Value.toString());
            localStorage.setItem(ref2, (!ref1Value).toString());
        }

        setMutuallyExclusive('Random Refresh', 'Successive Refresh');

        // Function to create and return a styled button
        function createButton(text, onClickFunction, color, topOffset) {
            var button = document.createElement("button");
            button.innerHTML = text;
            button.style.position = "fixed";
            button.style.top = topOffset + "px";
            button.style.right = "10px";
            button.style.zIndex = "10001"; // Ensure the button is above other elements
            button.style.padding = "10px 20px";
            button.style.background = `linear-gradient(to bottom, ${color[0]}, ${color[1]})`;
            button.style.color = "white";
            button.style.border = "none";
            button.style.cursor = "pointer";
            button.style.borderRadius = "20px";
            button.style.userSelect = "none"; // Prevent text selection
            button.style.fontSize = "16px";
            button.style.fontWeight = "bold";
            button.style.boxShadow = "0 4px 8px 0 rgba(0, 0, 0, 0.2)";
            button.style.textShadow = "1px 1px 2px rgba(0, 0, 0, 0.5)";
            button.style.transition = "transform 0.2s"; // Animation for click effect
            button.style.pointerEvents = "auto"; // Ensure the button is clickable

            button.addEventListener("click", onClickFunction);

            // Add click animation effect
            button.addEventListener("mousedown", function() {
                button.style.transform = "scale(0.95)";
            });
            button.addEventListener("mouseup", function() {
                button.style.transform = "scale(1)";
            });

            // Prevent button from being dragged accidentally
            button.ondragstart = function() {
                return false;
            };

            return button;
        }




        // Function to create and return a styled button
        function createButtonLeft(text, onClickFunction, color, topOffset) {
            var button = document.createElement("button");
            button.innerHTML = text;
            button.style.position = "fixed";
            button.style.top = topOffset + "px";
            button.style.left = "10px";
            button.style.zIndex = "10001"; // Ensure the button is above other elements
            button.style.padding = "10px 20px";
            button.style.background = `linear-gradient(to bottom, ${color[0]}, ${color[1]})`;
            button.style.color = "white";
            button.style.border = "none";
            button.style.cursor = "pointer";
            button.style.borderRadius = "20px";
            button.style.userSelect = "none"; // Prevent text selection
            button.style.fontSize = "16px";
            button.style.fontWeight = "bold";
            button.style.boxShadow = "0 4px 8px 0 rgba(0, 0, 0, 0.2)";
            button.style.textShadow = "1px 1px 2px rgba(0, 0, 0, 0.5)";
            button.style.transition = "transform 0.2s"; // Animation for click effect
            button.style.pointerEvents = "auto"; // Ensure the button is clickable

            button.addEventListener("click", onClickFunction);

            // Add click animation effect
            button.addEventListener("mousedown", function() {
                button.style.transform = "scale(0.95)";
            });
            button.addEventListener("mouseup", function() {
                button.style.transform = "scale(1)";
            });

            // Prevent button from being dragged accidentally
            button.ondragstart = function() {
                return false;
            };

            return button;
        }



        var OnOff = localStorage.OnOff || 'Off';
        localStorage.OnOff = OnOff;
  var loginButton = createButton("Login " + OnOff, function() {
           if(localStorage.OnOff == 'On' ){
               OnOff = 'Off';
               localStorage.OnOff = 'Off'
               loginButton.textContent = 'Login Off'
                loginButton.style.background = "linear-gradient(to bottom, #ff9999, #ff6666)";
           }else{
            OnOff = 'On';
               localStorage.OnOff = 'On'
               loginButton.textContent = 'Login On'
               loginButton.style.background = "linear-gradient(to bottom, #99ff99, #66ff66)"; // Change to green

           }
        }, ["#ff9999", "#ff6666"], 110);

        document.body.appendChild(loginButton);


       // captchaAutosolve
         var captchaOnOff = localStorage.captchaOnOff || 'Off';
        localStorage.captchaOnOff = captchaOnOff;
        localStorage.LoginAutoSolveCaptcha = localStorage.LoginAutoSolveCaptcha || 'false';
        localStorage.captchaautosolve = localStorage.LoginAutoSolveCaptcha || 'false';

  var CaptchButton = createButton("Captcha Auto Solve " + captchaOnOff, function() {
           if(localStorage.captchaOnOff == 'On' ){
               captchaOnOff = 'Off';
               localStorage.captchaOnOff = 'Off'
               CaptchButton.textContent = 'Captcha Auto Solve Off'
                CaptchButton.style.background = "linear-gradient(to bottom, #ff9999, #ff6666)";
           }else{
            captchaOnOff = 'On';
               localStorage.captchaOnOff = 'On'
               CaptchButton.textContent = 'Captcha Auto Solve On'
               CaptchButton.style.background = "linear-gradient(to bottom, #99ff99, #66ff66)"; // Change to green

           }
        }, ["#ff9999", "#ff6666"], 160);

        document.body.appendChild(CaptchButton);


        // Auto Submit Button VisaType
        var VisaTypeButtonOnOff = localStorage.visatypeOnOff || 'Off'
        localStorage.visatypeOnOff = VisaTypeButtonOnOff;
        localStorage.isEnabled = localStorage.isEnabled || 'false'
var VisaTypeButton = createButton('Visa Type Auto Submit ' + VisaTypeButtonOnOff , function() {
   if(localStorage.isEnabled == 'true'){
       localStorage.isEnabled = 'false';
       localStorage.visatypeOnOff ='Off';
       VisaTypeButton.textContent = 'Visa Type Auto Submit Off'
        VisaTypeButton.style.background = "linear-gradient(to bottom, #ff9999, #ff6666)";
   }else{
       if(localStorage.isEnabled == 'false'){
       localStorage.isEnabled = 'true';
          localStorage.visatypeOnOff ='On';
           VisaTypeButton.textContent = 'Visa Type Auto Submit On'
           VisaTypeButton.style.background = "linear-gradient(to bottom, #99ff99, #66ff66)"; // Change to green
       }
   }
}, ["#ff9999", "#ff6666"], 210);


  document.body.appendChild(VisaTypeButton);


                     var interval = setInterval(function(){
        if(OnOff == 'On'){
        localStorage.setItem('Auto Login','true')
            localStorage.autoLogin ='true'
               loginButton.style.background = "linear-gradient(to bottom, #99ff99, #66ff66)"; // Change to green

        }else{
         localStorage.setItem('Auto Login','false')
            localStorage.autoLogin ='false';
            loginButton.style.background = "linear-gradient(to bottom, #ff9999, #ff6666)";
        }
             if(captchaOnOff == 'On'){
        localStorage.setItem('Captcha Visa Type Auto Solve','true')
        localStorage.setItem('Captcha Login Auto Solve','true')
                 localStorage.LoginAutoSolveCaptcha = 'true'
                 localStorage.captchaautosolve = 'true'
                   CaptchButton.style.background = "linear-gradient(to bottom, #99ff99, #66ff66)"; // Change to green
        }else{
           localStorage.setItem('Captcha Visa Type Auto Solve','false')
        localStorage.setItem('Captcha Login Auto Solve','false')
             localStorage.LoginAutoSolveCaptcha = 'false'
                 localStorage.captchaautosolve = 'false'
                     CaptchButton.style.background = "linear-gradient(to bottom, #ff9999, #ff6666)";
        }

                       if(localStorage.isEnabled == 'false'){
                          VisaTypeButton.style.background = "linear-gradient(to bottom, #ff9999, #ff6666)";
                       }else{
                           if(localStorage.isEnabled == 'true'){
                       VisaTypeButton.style.background = "linear-gradient(to bottom, #99ff99, #66ff66)"; // Change to green
                           }
                       }


        },10)

   function ChangeCat(){
       var Client;

    if(localStorage.getItem('category') == 'Normal'){
 Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.getItem('category'),
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }


      if(localStorage.getItem('category') == 'Premium'){
    Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.getItem('category'),
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }

      if(localStorage.getItem('category') == 'Prime Time'){
    Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.getItem('category'),
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }


  ////////////////////////////////////////////////////////////////////
       if(localStorage.getItem('category') == 'Permutation [Normal - Premium]'){

           localStorage.PermutationCat = localStorage.PermutationCat || 'Normal'

           if(localStorage.PermutationCat == 'Normal'){
           localStorage.PermutationCat = 'Premium';
           }else{
           if(localStorage.PermutationCat == 'Premium'){
           localStorage.PermutationCat = 'Normal'
           }else{

           if(localStorage.PermutationCat == 'Prime Time'){
           localStorage.PermutationCat = 'Normal'
           }
           }
           }

 Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.PermutationCat,
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }


    /////////////////////////////////////////////////////////////////////////
           if(localStorage.getItem('category') == 'Permutation [Normal - Prime Time]'){

           localStorage.PermutationCat = localStorage.PermutationCat || 'Normal'

           if(localStorage.PermutationCat == 'Normal'){
           localStorage.PermutationCat = 'Prime Time';
           }else{
           if(localStorage.PermutationCat == 'Prime Time'){
           localStorage.PermutationCat = 'Normal'
           }else{

           if(localStorage.PermutationCat == 'Premium'){
           localStorage.PermutationCat = 'Normal'
           }
           }
           }

 Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.PermutationCat,
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }




    ////////////////////////////////////////////////////////////////////////////////////////////////////////

     /////////////////////////////////////////////////////////////////////////
           if(localStorage.getItem('category') == 'Permutation [Premium - Prime Time]'){

           localStorage.PermutationCat = localStorage.PermutationCat || 'Premium'

           if(localStorage.PermutationCat == 'Premium'){
           localStorage.PermutationCat = 'Prime Time';
           }else{
           if(localStorage.PermutationCat == 'Prime Time'){
           localStorage.PermutationCat = 'Premium'
           }else{

           if(localStorage.PermutationCat == 'Normal'){
           localStorage.PermutationCat = 'Premium'
           }
           }
           }

 Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.PermutationCat,
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }



    //////////////////////////////////////////////////////////////////////////////////////////////////
      if(localStorage.getItem('category') == 'Permutation [Normal- Premium- Prime Time]'){

           localStorage.PermutationCat = localStorage.PermutationCat || 'Premium'

           if(localStorage.PermutationCat == 'Premium'){
           localStorage.PermutationCat = 'Prime Time';
           }else{
           if(localStorage.PermutationCat == 'Prime Time'){
           localStorage.PermutationCat = 'Normal'
           }else{

           if(localStorage.PermutationCat == 'Normal'){
           localStorage.PermutationCat = 'Premium'
           }
           }
           }

 Client = {
    familyOfMembers: localStorage.getItem('familyOfMembers'),
    location: localStorage.getItem('location'),
    category: localStorage.PermutationCat,
    visatype: localStorage.getItem('visatype'),
    visaSubtype: localStorage.getItem('visaSubtype')
};
    }





    /////////////////////////////////////////////////////////////////////////////////////////////////////

       var CategoryId,
           LocationId,
           VisaTypeId,
           VisaSubTypeId,
           IndivId,
           FamilyId,
           IndivElmnt,
           FamilyElmnt

function extractIdsFromText(text) {
    // Regular expression to match the pattern: $("#<id>")
    const regex = /\$\("#(\w+)"\)/g;

    // Array to hold all matched IDs
    let ids = [];

    // Variable to store the current match
    let match;

    // Iterate over all matches
    while ((match = regex.exec(text)) !== null) {
        // Add the captured group (which is the ID) to the ids array
        ids.push(match[1]);
    }

    return ids;
}

const fnct= OnSubmitVisaType.toString()
 var IdArray = extractIdsFromText(fnct);
var IdArray2 = extractIdsFromText(fnct);
console.log(IdArray);




    for (let i = 0; i < IdArray.length; i++) {
    if (IdArray[i].startsWith('an')) {
        // Remove 'an' prefix and update the variable in the array
        let modifiedVariable = IdArray[i].slice(2);
        IdArray[i] = modifiedVariable  // Add the modified variable back to the array
    }
}
    console.log(IdArray);









    for(let i=0 ; i<25 ;i++){

  if ($("#" + IdArray[i] + '_label').is(":visible")) {

  console.log(IdArray[i])

      if(document.querySelector("#" + IdArray[i] + "_label").textContent == 'Category*'){
          $("#" + IdArray[i]).click();
          CategoryId = IdArray[i];
         $("#"+CategoryId+"_listbox >.k-item:contains("+Client.category +")").click();
      } }}

   }

      // category button
var category = localStorage.category || 'Normal';
localStorage.category = category;

var catButton = createButton(category, function() {
    if (category === 'Normal') {
        category = 'Premium';
        localStorage.category = 'Premium';
        catButton.textContent = 'Premium';
        if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }

    } else if (category === 'Premium') {
        category = 'Prime Time';
        localStorage.category = 'Prime Time';
        catButton.textContent = 'Prime Time';
         if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }
    } else if (category === 'Prime Time') {
        category = 'Permutation [Normal - Premium]';
        localStorage.category = 'Permutation [Normal - Premium]';
        catButton.textContent = 'Permutation [Normal - Premium]';
         if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }

    } else if(category === 'Permutation [Normal - Premium]'){
      category = 'Permutation [Normal - Prime Time]';
        localStorage.category = 'Permutation [Normal - Prime Time]';
        catButton.textContent = 'Permutation [Normal - Prime Time]';
         if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }


    } else if( category == 'Permutation [Normal - Prime Time]'){
     category = 'Permutation [Premium - Prime Time]';
        localStorage.category = 'Permutation [Premium - Prime Time]';
        catButton.textContent = 'Permutation [Premium - Prime Time]';
         if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }



    } else if( category == 'Permutation [Premium - Prime Time]'){
     category = 'Permutation [Normal- Premium- Prime Time]';
        localStorage.category = 'Permutation [Normal- Premium- Prime Time]';
        catButton.textContent = 'Permutation [Normal- Premium- Prime Time]';
         if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }



    } else if( category == 'Permutation [Normal- Premium- Prime Time]'){
     category = 'Normal';
        localStorage.category = 'Normal';
        catButton.textContent = 'Normal';
         if(window.location.href.includes("/VisaType?data")){
            ChangeCat();
        }



    }
}, ["#ff9999", "#ff6666"], 260);

document.body.appendChild(catButton);

   const RotateIpButton = document.querySelector("body > button.ChangeIp");

        // Config Button

        var configButton = createButton("Config", function() {
            
         
            configMenu.style.display = configMenu.style.display === 'none' ? 'block' : 'none';
            DownloadExtension.style.display = DownloadExtension.style.display === 'none' ? 'block' : 'none';
            RotateIpButton.style.display = RotateIpButton.style.display === 'none' ? 'block' : 'none';
            
        }, ["#ff9999", "#ff6666"], 310);
        document.body.appendChild(configButton);

        // Date Reflash Button
        var dateReflashButton = createButton("Date Refresh", function() {
            datePickerMenu.style.display = datePickerMenu.style.display === 'none' ? 'block' : 'none';
        }, ["#ff9999", "#ff6666"], 360);
        document.body.appendChild(dateReflashButton);
        if(localStorage.CaptchaType == 'Apikey' || localStorage.CaptchaType == 'Local'){
            localStorage.CaptchaType ='NoCaptchaAi';

        }
        var CaptchaType = localStorage.CaptchaType || "Captcha Local" ;
        localStorage.CaptchaType = CaptchaType;

        // PayAmount Button
        var ForbesCaptchaType = createButton("Forbes " + CaptchaType, function() {
            if(localStorage.CaptchaType === 'Captcha Local') {

                localStorage.CaptchaType = 'NoCaptchaAi';
                ForbesCaptchaType.textContent = "Forbes NoCaptchaAi";

            } else {
                if(localStorage.CaptchaType === 'NoCaptchaAi') {

                    localStorage.CaptchaType = 'TrueCaptcha';
                    ForbesCaptchaType.textContent = "Forbes TrueCaptcha";

                }else{

                    if(localStorage.CaptchaType === 'TrueCaptcha'){

                        localStorage.CaptchaType = 'Captcha Local';
                        ForbesCaptchaType.textContent = "Forbes Captcha Local";


                    }



                }
            }
        }, ["#ff9999", "#ff6666"], 410);
        document.body.appendChild(ForbesCaptchaType);

          // LogOut Button
          var DownloadApp = createButton("Download Forbes Link App", function() {
           function downloadFile() {
  // Specify the file path on your Hostinger server
  const fileUrl = 'https://houarimed.tech/downloadForbesApp/Forbes_App_V1.apk';

  // Create an invisible anchor element
  const link = document.createElement('a');
  link.href = fileUrl;

  // Optional: Set the file name to download
  link.download = 'Forbes_App.apk';

  // Append the link to the document body
  document.body.appendChild(link);

  // Programmatically trigger the click event on the anchor to start the download
  link.click();

  // Remove the anchor from the document after triggering the download
  document.body.removeChild(link);
}

// Call the download function to initiate the download
downloadFile();

        }, ["#ff9999", "#ff6666"], 460);
        document.body.appendChild(DownloadApp);



        var DownloadApp2 = createButton("Download Forbes Code App", function() {
            function downloadFile() {
   // Specify the file path on your Hostinger server
   const fileUrl = 'https://houarimed.tech/downloadForbesApp/Forbes_App_Code.apk';

   // Create an invisible anchor element
   const link = document.createElement('a');
   link.href = fileUrl;

   // Optional: Set the file name to download
   link.download = 'Forbes_App.apk';

   // Append the link to the document body
   document.body.appendChild(link);

   // Programmatically trigger the click event on the anchor to start the download
   link.click();

   // Remove the anchor from the document after triggering the download
   document.body.removeChild(link);
 }

 // Call the download function to initiate the download
 downloadFile();

         }, ["#ff9999", "#ff6666"], 510);
         document.body.appendChild(DownloadApp2);



         var GetSelfieLink = createButton("Get Selfie Link", function() {


            if(window.location.href.includes("Liveness?data")){

            }else{

                   var AutoResponseSelfie = localStorage.getItem('Auto Submit Response Selfie Code');

                   function ExtractTheSelfieCode(){



                   const scriptContents = [...document.scripts].map(script => script.textContent);
                   const selfieCode = scriptContents.map(content => {
                       const match = content.match(/OzLiveness\.open\((.+)\)/s);
                       if (match) {
                           const params = match[1];
                           const userIdMatch = params.match(/['"]?user_id['"]?:\s*['"]?([^'"]+)['"]?/);
                           const transactionIdMatch = params.match(/['"]?transaction_id['"]?:\s*['"]?([^'"]+)['"]?/);
                           if (userIdMatch && transactionIdMatch) {
                               return userIdMatch[1] + "," + transactionIdMatch[1];
                           }
                       }
                   }).filter(Boolean).at(0);



                   return selfieCode ;
                   }


                   // ثابت اسم العميل
                   var clientName; // ثابت اسم العميل
                   var selfieCode = ''; // متغير لحفظ الكود الذي سيتم البحث عنه
                   var intervalId; // متغير لتخزين معرف الفاصل الزمني لإيقاف البحث لاحقًا
                   var encryptedSelfieCodeValue;
                   var generatedLink;
                   var ResultCode;


                   if(window.location.href.includes('livenessrequest')){

                    clientName = localStorage.UserId;

                   }else{

                    clientName = 'Test' + localStorage.UserId;

                   }






                   // Create the main container for the interface
                   var container = document.createElement('div');
                   container.style.position = 'fixed';
                   container.style.top = '50%';
                   container.style.left = '50%';
                   container.style.transform = 'translate(-50%, -50%)';
                   container.style.padding = '20px';
                   container.style.border = '2px solid black';
                   container.style.backgroundColor = 'white';
                   container.style.zIndex = '9999';
                   container.style.width = '500px';  // Increased width for better layout

                   // Create title
                   var title = document.createElement('h2');
                   title.innerText = 'Forbes Selfi';
                   title.style.color = 'red';
                   title.style.textAlign = 'center';
                   container.appendChild(title);

                   // ** Create close button (X) **
                   var closeButton = document.createElement('button');
                   closeButton.innerHTML = 'X';
                   closeButton.style.position = 'absolute';
                   closeButton.style.top = '5px';
                   closeButton.style.right = '10px';
                   closeButton.style.backgroundColor = 'transparent';
                   closeButton.style.color = 'red';
                   closeButton.style.border = 'none';
                   closeButton.style.fontSize = '20px';
                   closeButton.style.cursor = 'pointer';
                   closeButton.onclick = function() {
                   container.style.display = 'none';  // Hide the container when clicked

                   // ** Clear interval to stop checking the status **
                   if (intervalId) {
                       clearInterval(intervalId);
                       console.log('Interval cleared. No more requests will be sent.');
                   }

                   // ** Optionally, cancel any ongoing AJAX requests (if needed) **
                   // You can add a flag or logic to cancel any ongoing requests here if applicable
                   };
                   container.appendChild(closeButton);  // Add the close button to the container

                   // Function to create a styled button
                   function createButton(text, color, onClickHandler) {
                   var button = document.createElement('button');
                   button.innerText = text;
                   button.style.display = 'inline-block';
                   button.style.margin = '5px';
                   button.style.padding = '10px';
                   button.style.backgroundColor = color;
                   button.style.borderRadius = '10px';
                   button.style.border = 'none';
                   button.style.color = 'white';
                   button.style.fontSize = '14px';
                   button.onclick = onClickHandler;
                   return button;
                   }

                   // Create flex container for link input and copy button
                   var linkContainer = document.createElement('div');
                   linkContainer.style.display = 'flex';
                   linkContainer.style.justifyContent = 'space-between';
                   linkContainer.style.alignItems = 'center';
                   linkContainer.style.marginBottom = '10px';

                   // Create link input and copy button with increased input width
                   var linkInput = document.createElement('input');
                   linkInput.type = 'text';
                   linkInput.style.flex = '1';  // Make input take most of the space
                   linkInput.style.marginRight = '10px';
                   linkInput.style.padding = '8px';

                   var getLinkButton = createButton('get link', '#FF6666', async function() {
                   // Generate a random ID

                   function generateUUID() {
                   return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                       var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                       return v.toString(16);
                   });
                   }

                   function generateMultipleUUIDs(count) {
                   let uuids = [];
                   for (let i = 0; i < count; i++) {
                       uuids.push(generateUUID());
                   }
                   return uuids.join(',');
                   }

                   // Example usage: Generate two UUIDs
                   var codes = generateMultipleUUIDs(2);

                   // Wait for the script to load before executing your code

                   selfieCode = ExtractTheSelfieCode();
                       if(!selfieCode){
                       selfieCode = codes;
                       }



                   // Now you can use CryptoJS
                   const key = 'SELFIE CODE';
                   const value = selfieCode ;
                   async function EncryptCode(code) {
                   try {
                   const response = await fetch('https://houarimed.tech/apiforbes/encrypt.php', {
                       method: 'POST',
                       headers: {
                           'Content-Type': 'application/x-www-form-urlencoded'
                       },
                       body: new URLSearchParams({
                           action: 'encrypt',
                           data: code
                       })
                   });

                   const encrypted = await response.text();
                   return encrypted; // This will return the decrypted string
                   } catch (error) {
                   console.error('Error decrypting code:', error);
                   return ''; // Return an empty string in case of an error
                   }
                   }
                   // Encrypt the value using CryptoJS and a passphrase
                   var encryptedValue = await EncryptCode(selfieCode);

                   // Store the encrypted value in localStorage
                   localStorage.setItem(key, encryptedValue);
                   // console.log('Encrypted value stored in localStorage:', encryptedValue);

                   encryptedSelfieCodeValue = encryptedValue;
                   //encryptedSelfieCodeValue = 'inshallahThisWillBeSeccessful';
                   // Create the custom link
                    generatedLink = 'https://houarimed.tech/nidhal?id=' + encryptedSelfieCodeValue;
                   linkInput.value = generatedLink;


                   // Log the selfie_code value to ensure it's being set
                   console.log("Generated Selfie Code: ", encryptedSelfieCodeValue);

                   // Send the ID and client name to the database
                   if (encryptedSelfieCodeValue) {
                       fetch('https://houarimed.tech/apiselfi/save_selfie_code.php', {
                           method: 'POST',
                           headers: {
                               'Content-Type': 'application/json'
                           },
                           body: JSON.stringify({
                               selfie_code: selfieCode,// Send the generated ID
                               client_name: clientName, // Send the client name as "MOHAMED"
                           })
                       })
                       .then(response => response.json())
                       .then(data => {
                           console.log("Response from server:", data); // Log the response to debug
                           if (data.success) {
                               alert('ID and Client Name saved successfully!');
                           } else {
                               alert('Failed to save data: ' + data.message);
                           }
                       })
                       .catch(error => {
                           console.error('Error saving data:', error);
                       });
                   } else {
                       alert('Selfie code is not generated yet.');
                   }





                   });




                   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////







                   var copyLinkButton = createButton('copie', '#FF6666', function() {
                   // Select the link input's value
                   linkInput.select();
                   linkInput.setSelectionRange(0, 99999); // For mobile devices

                   try {
                       document.execCommand('copy');
                       alert('Link copied to clipboard!');
                   } catch (err) {
                       alert('Failed to copy text: ', err);
                   }
                   });

                   linkContainer.appendChild(getLinkButton);
                   linkContainer.appendChild(linkInput);
                   linkContainer.appendChild(copyLinkButton);

                   container.appendChild(linkContainer);

                   // Create start selfi button and loader
                   var startSelfiButton = createButton('start selfi', '#28a745', function() {
                   alert('Selfi started!');
                   });
                   startSelfiButton.style.display = 'none'; // Hidden by default
                   container.appendChild(startSelfiButton);

                   // Create a loader (spinning icon)
                   var loader = document.createElement('div');
                   loader.style.display = 'none'; // Hidden by default
                   loader.style.width = '30px';
                   loader.style.height = '30px';
                   loader.style.border = '4px solid #f3f3f3';
                   loader.style.borderTop = '4px solid #FF6666';
                   loader.style.borderRadius = '50%';
                   loader.style.animation = 'spin 1s linear infinite';
                   loader.style.margin = 'auto';
                   container.appendChild(loader);

                   // Function to check the value of 'start' in the database using selfie_code
                   function checkStartValue(s) {
                   if (!s) {
                       alert('Selfie code is not generated yet.');
                       return;
                   }

                   console.log("Checking start value for selfie code:", s);

                   fetch('https://houarimed.tech/apiselfi/get_start_status.php', {
                       method: 'POST',
                       headers: {
                           'Content-Type': 'application/json'
                       },
                       body: JSON.stringify({
                           selfie_code: s // Send selfie_code to check
                       })
                   })
                   .then(response => response.json())
                   .then(data => {
                       console.log("Response from server (start check):", data); // Log the response for debugging
                       const status = data.status; // الحصول على الحالة كما هي

                       if (status === 'Starting') {
                           startSelfiButton.innerText = 'Starting';  // Change the text to "Starting"
                           startSelfiButton.style.display = 'inline-block';  // Show the button
                           loader.style.display = 'block';  // Show loader
                       } else if (status === 'Restarting') {
                           startSelfiButton.innerText = 'Restarting';  // Change the text to "Restarting"
                           startSelfiButton.style.display = 'inline-block';  // Show the button
                           loader.style.display = 'block';  // Show loader
                       } else if (status === 'Done') {
                           // Hide start button and loader, and show "Selfie Verified" button
                           startSelfiButton.style.display = 'none';
                           loader.style.display = 'none'; // Hide loader

                           var selfieVerifiedButton = createButton('Selfie Verified', '#28a745', function() {
                             // alert('Selfie has been successfully verified!');



                                function startChecking(selfieCode) {

                   var interval = setInterval(function() {
                       fetch(`https://houarimed.tech/apiselfi/check_selfie_status.php?selfie_code=${selfieCode}`)
                       .then(response => response.json())
                       .then(data => {
                           if (data.verification_status === 'failure') {
                           console.log(' Status failure')

                           } else if (data.verification_status === 'success') {
                               // إذا كانت الحالة success
                               clearInterval(interval); // إيقاف المحاولة عند النجاح

                               ResultCode = data.result_code;
                   if(localStorage.getItem('Auto Submit Response Selfie Code') == 'false' ){
                                alert(data.result_code);
                   }
                                 document.getElementById("LivenessId").value = ResultCode;
                                 document.getElementById("formLiveness").submit();

                           }
                       })
                       .catch(error => {
                           console.error("Error while checking verification status:", error);
                       });
                   }, 1000); // إعادة المحاولة كل 5 ثوانٍ
                   }
                               startChecking(selfieCode);

                           });
                           container.appendChild(selfieVerifiedButton);

                           if(localStorage.getItem('Auto Submit Response Selfie Code') == 'true'){
                           selfieVerifiedButton.click();
                           }

                           // Stop the interval (stop checking the status)
                           clearInterval(intervalId);

                       } else {
                           startSelfiButton.style.display = 'none'; // Hide the button if not 'Starting', 'Restarting', or 'Done'
                           loader.style.display = 'none'; // Hide loader in case of any other status
                       }
                   })
                   .catch(error => {
                       console.error('Error checking start value:', error);
                       loader.style.display = 'none'; // Hide loader if there's an error
                   });
                   }

                   // Check the value of 'start' every 5 seconds if a selfie_code is present
                   intervalId = setInterval(function() {
                   if (encryptedSelfieCodeValue) {
                       checkStartValue(selfieCode);
                   }
                   }, 1024*5);

                   // Add the container to the body
                   document.body.appendChild(container);

                   // Add CSS for loader animation
                   var style = document.createElement('style');
                   style.innerHTML = `
                   @keyframes spin {
                       0% { transform: rotate(0deg); }
                       100% { transform: rotate(360deg); }
                   }
                   `;
                   document.head.appendChild(style);





            }

               }, ["#ff9999", "#ff6666"], 560);
        document.body.appendChild(GetSelfieLink);


        var LogOutButton = createButton("LogOut", function() {
            function OnLogoutSubmit() {
            ShowLoader();
            $.ajax({
                type: "POST",
                url: "/MAR/account/logout",
                success: function (response) {
                    HideLoader();
                    if (response != "" && response != null && response.success === true) {
                        window.location.href = response.ru;
                    }
                },
                error: function (response) {
                    HideLoader();
                    alert(response.error);
                },
            });
            return false;
        }
            OnLogoutSubmit();
        }, ["#ff9999", "#ff6666"], 610);
        document.body.appendChild(LogOutButton);


             var DownloadExtension = createButtonLeft("Download Forbes proxy Extension", function() {


                    function downloadFile() {
  // Specify the file path on your Hostinger server
  const fileUrl = 'https://houarimed.tech/FORBES PROXY EXTENSION/Proxy Forbes Extension.rar';

  // Create an invisible anchor element
  const link = document.createElement('a');
  link.href = fileUrl;

  // Optional: Set the file name to download
  link.download = 'Forbes_App.apk';

  // Append the link to the document body
  document.body.appendChild(link);

  // Programmatically trigger the click event on the anchor to start the download
  link.click();

  // Remove the anchor from the document after triggering the download
  document.body.removeChild(link);
}

// Call the download function to initiate the download
downloadFile();

        }, ["#ff9999", "#ff6666"], 160);
        document.body.appendChild(DownloadExtension);



        // Create the config menu
        const configMenu = document.createElement('div');
        configMenu.style.position = 'fixed';
        configMenu.style.top = '0';
        configMenu.style.left = '0';
        configMenu.style.width = '100%'; // Full width
        configMenu.style.height = '100%'; // Full height
        configMenu.style.backgroundColor = 'rgba(255, 255, 255, 0.9)'; // Semi-transparent background
        configMenu.style.border = '1px solid #ccc';
        configMenu.style.borderRadius = '10px';
        configMenu.style.display = 'none';
        configMenu.style.zIndex = '10000'; // Ensure the config menu is above all elements but below the buttons
        configMenu.style.overflow = 'auto'; // Add scrolling if content overflows
        configMenu.style.padding = '20px';
        configMenu.style.pointerEvents = "auto"; // Ensure the config menu is interactive
        document.body.appendChild(configMenu);

        // Create and add checkboxes to the config menu
        const options = [
            'Auto Refresh',
            'Random Refresh',
            'Successive Refresh',
            'Auto Submit Response Selfie Code',
            'Auto Login',
            'Captcha Login Auto Solve',
            'Captcha Visa Type Auto Solve',
            'Auto Submit Visa Type',
            'Auto Select Date',
            'Auto Submit Date Selection',
            'Auto Upload Photo',
            'Auto Calendar ByPass Captcha',
            'Auto Send Otp',
            'Auto Selfi',
            'Auto skip',
            'Random Mobile Number',
            'Random Passport Issue Place',
            'Random Passport Issue And Expiry Date'
        ];

        options.forEach(option => {
            const label = document.createElement('label');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = localStorage.getItem(option) === 'true';
            checkbox.onchange = () => {
                if (option === 'Random Refresh' || option === 'Successive Refresh') {
                    localStorage.setItem(option, checkbox.checked.toString());
                    if (checkbox.checked) {
                        if (option === 'Random Refresh') {
                            localStorage.setItem('Successive Refresh', 'false');
                            document.getElementById('Successive Refresh').checked = false;
                        } else {
                            localStorage.setItem('Random Refresh', 'false');
                            document.getElementById('Random Refresh').checked = false;
                        }
                    } else {
                        if (option === 'Random Refresh') {
                            localStorage.setItem('Successive Refresh', 'true');
                            document.getElementById('Successive Refresh').checked = true;
                        } else {
                            localStorage.setItem('Random Refresh', 'true');
                            document.getElementById('Random Refresh').checked = true;
                        }
                    }
                } else {
                    localStorage.setItem(option, checkbox.checked);
                }
            };
            checkbox.id = option;
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(option));
            configMenu.appendChild(label);
            configMenu.appendChild(document.createElement('br'));
        });

        // Create and add the submit button to the config menu
        const submitButton = document.createElement('button');
        submitButton.innerText = 'Submit';
        submitButton.style.padding = "10px 20px";
        submitButton.style.background = `linear-gradient(to bottom, #99ff99, #66ff66)`;
        submitButton.style.color = "white";
        submitButton.style.border = "none";
        submitButton.style.cursor = "pointer";
        submitButton.style.borderRadius = "20px";
        submitButton.style.userSelect = "none"; // Prevent text selection
        submitButton.style.fontSize = "16px";
        submitButton.style.fontWeight = "bold";
        submitButton.style.boxShadow = "0 4px 8px 0 rgba(0, 0, 0, 0.2)";
        submitButton.style.textShadow = "1px 1px 2px rgba(0, 0, 0, 0.5)";
        submitButton.style.transition = "transform 0.2s"; // Animation for click effect
        submitButton.addEventListener("mousedown", function() {
            submitButton.style.transform = "scale(0.95)";
        });
        submitButton.addEventListener("mouseup", function() {
            submitButton.style.transform = "scale(1)";
        });
        submitButton.onclick = () => {
            configMenu.style.display = 'none';
                DownloadExtension.style.display = DownloadExtension.style.display === 'none' ? 'block' : 'none';
            RotateIpButton.style.display = RotateIpButton.style.display === 'none' ? 'block' : 'none';
        };
        submitButton.style.position = "relative";
        submitButton.style.marginTop = "10px";
        configMenu.appendChild(submitButton);

        // Create the date picker menu
        const datePickerMenu = document.createElement('div');
        datePickerMenu.style.position = 'fixed';
        datePickerMenu.style.top = '0';
        datePickerMenu.style.left = '50%'; // Center the date picker menu horizontally
        datePickerMenu.style.transform = 'translateX(-50%)'; // Center the date picker menu
        datePickerMenu.style.width = '50%'; // Half width
        datePickerMenu.style.backgroundColor = 'rgba(255, 255, 255, 0.9)'; // Semi-transparent background
        datePickerMenu.style.border = '1px solid #ccc';
        datePickerMenu.style.borderRadius = '10px';
        datePickerMenu.style.display = 'none';
        datePickerMenu.style.zIndex = '10000'; // Ensure the date picker menu is above all elements but below the buttons
        datePickerMenu.style.overflow = 'auto'; // Add scrolling if content overflows
        datePickerMenu.style.padding = '20px';
        datePickerMenu.style.pointerEvents = "auto"; // Ensure the date picker menu is interactive
        document.body.appendChild(datePickerMenu);

        // Function to save selected dates to localStorage for a city
        function saveDates(city, dates) {
            localStorage.setItem(city + 'Dates', JSON.stringify(dates));
        }

        // Function to clear selected dates for a city from localStorage, input field, and flatpickr instance
        function clearDates(city) {
            localStorage.removeItem(city + 'Dates');
            const dateInput = document.getElementById(city + 'DatePicker');
            if (dateInput && dateInput._flatpickr) {
                dateInput._flatpickr.clear();
            }
        }

        // Function to handle date selection and saving
        function handleDateSelection(city) {
            return function(selectedDates, dateStr, instance) {
                let cityDatesArray = selectedDates.map(date => instance.formatDate(date, "Y-m-d"));
                saveDates(city, cityDatesArray);
            };
        }

        // Create and add a date picker input using flatpickr for each city
        const cities = [
            { name: 'CasaNat', label: 'Casablanca (NAT)' },
            { name: 'CasaShengen', label: 'Casablanca (Shengen)' },
            { name: 'Rabat', label: 'Rabat' },
            { name: 'Tetouan', label: 'Tetouan' },
            { name: 'Nador', label: 'Nador' },
            { name: 'Tangier', label: 'Tangier' },
            { name: 'Agadir', label: 'Agadir' }
        ];

        cities.forEach(city => {
            const container = document.createElement('div');
            container.style.display = 'flex';
            container.style.alignItems = 'center';
            container.style.marginBottom = '10px';

            const label = document.createElement('label');
            label.innerText = city.label + ': ';
            label.style.fontWeight = 'bold';
            label.style.fontSize = '18px';
            label.style.marginRight = '10px';
            container.appendChild(label);

            const dateInput = document.createElement('input');
            dateInput.id = city.name + 'DatePicker';
            dateInput.style.flex = '1';
            container.appendChild(dateInput);

            const clearButton = document.createElement('button');
            clearButton.innerText = 'Clear';
            clearButton.style.marginLeft = '10px';
            clearButton.style.padding = '5px 10px';
            clearButton.style.background = `linear-gradient(to bottom, #ff9999, #ff6666)`;
            clearButton.style.color = 'white';
            clearButton.style.border = 'none';
            clearButton.style.cursor = 'pointer';
            clearButton.style.borderRadius = '5px';
            clearButton.addEventListener('click', () => clearDates(city.name));
            container.appendChild(clearButton);

            datePickerMenu.appendChild(container);

            const fp = flatpickr("#" + city.name + "DatePicker", {
                mode: "multiple",
                dateFormat: "Y-m-d",
                locale: "fr",
                onClose: handleDateSelection(city.name)
            });

            // Load saved dates from localStorage
            const savedDates = JSON.parse(localStorage.getItem(city.name + 'Dates'));
            if (savedDates && savedDates.length > 0) {
                fp.setDate(savedDates);
            }
        });

        // Create Save and Exit buttons
        const buttonContainer = document.createElement('div');
        buttonContainer.style.display = 'flex';
        buttonContainer.style.justifyContent = 'space-between';
        buttonContainer.style.marginTop = '20px';

        const saveButton = document.createElement('button');
        saveButton.innerText = 'Save';
        saveButton.style.padding = '10px 20px';
        saveButton.style.background = `linear-gradient(to bottom, #99ff99, #66ff66)`;
        saveButton.style.color = 'white';
        saveButton.style.border = 'none';
        saveButton.style.cursor = 'pointer';
        saveButton.style.borderRadius = '5px';
        saveButton.addEventListener('click', () => {
            datePickerMenu.style.display = 'none';
        });
        buttonContainer.appendChild(saveButton);

        const exitButton = document.createElement('button');
        exitButton.innerText = 'Exit';
        exitButton.style.padding = '10px 20px';
        exitButton.style.background = `linear-gradient(to bottom, #ff9999, #ff6666)`;
        exitButton.style.color = 'white';
        exitButton.style.border = 'none';
        exitButton.style.cursor = 'pointer';
        exitButton.style.borderRadius = '5px';
        exitButton.addEventListener('click', () => {
            datePickerMenu.style.display = 'none';
        });
        buttonContainer.appendChild(exitButton);

        datePickerMenu.appendChild(buttonContainer);
    }
}
